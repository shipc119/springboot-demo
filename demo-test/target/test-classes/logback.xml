<?xml version="1.0" encoding="UTF-8" ?>
<configuration debug="true" scan="true" scanPeriod="1 seconds">
    <!--  定义日志文件的存储地址，勿在logback配置文件中使用相对路径  -->
    <property name="LOG_HOME" value="log"/>

    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--  定义一个过滤器，在level之下的日志输出不会被打印出来  -->
        <!--  这里定义了DEBUG，也就是控制台不会数据比ERROR级别小的日志  -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--   encoder 默认配置为PatternLayoutEncoder   -->
        <!--    定义控制台输出格式    -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--  格式化输出：%d表示日期，%thread表示线程名，%-5level级别从左显示5个字符宽度，%msg日志消息，%n换行  -->
            <pattern>%d [%thread] %-5level %logger{36} [%file : %line] - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件-->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/logback-%d{yyyy-MM-dd}.log</FileNamePattern>
            <!-- 日志文件保留天数 -->
            <MaxHistory>30</MaxHistory>
            <!-- 日志量最大10GB-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <!-- 格式化日志输出-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!-- 每个日志文件最大10MB-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!--日志异步到数据库-->
<!--    <appender name="db" class="ch.qos.logback.classic.db.DBAppender">-->
<!--        &lt;!&ndash;日志异步数据库&ndash;&gt;-->
<!--        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">-->
<!--            &lt;!&ndash;连接池&ndash;&gt;-->
<!--            <dataSource class="com.alibaba.druid.pool.DruidDataSource">-->
<!--                <driverClass>com.mysql.jdbc.Driver</driverClass>-->
<!--                <url>jdbc:mysql://localhost:3306/databaseName</url>-->
<!--                <user>root</user>-->
<!--                <password>root</password>-->
<!--            </dataSource>-->
<!--        </connectionSource>-->
<!--    </appender>-->


    <!--  root是默认的logger，这里设定暑促级别为DEBUG  -->
    <root level="info">
        <!--  定义了两个appender,日志会往这两个appender里写  -->
        <appender-ref ref="stdout"/>
        <appender-ref ref="file"/>
    </root>
    <!--  对于类路径以com.shipc.demo开头的logger，输出级别设为warn -->
    <!--  这个logger没有指定appender，它会继承root节点中定义的那些appender  -->
    <logger name="com.shipc.demo.test.orm" level="debug"/>

    <!--  通过 LoggerFactory.getLogger("mytest") 可以获取到这个logger  -->
    <!--  由于logger自动继承了root的appender，root中已经有stdout的appender了，自己这边又引入了stdout的appender  -->
    <!--  如果没有设置additivity="false"， 就会导致一条日志在控制台输出两次的情况  -->
    <!--  additivity表示要不要使用rootLogger配置的appender进行输出  -->
    <logger name="mytest" level="info" additivity="false">
        <appender-ref ref="stdout"/>
    </logger>

    <!--  由于设置了additivity="false", 所以输出时不会使用rootLogger的appender  -->
    <!--  但是这个logger本身又没有配置appender，所以使用这个logger输出日志的话就不会输出到任何地方  -->
    <logger name="mytest2" level="info" additivity="false"/>
</configuration>